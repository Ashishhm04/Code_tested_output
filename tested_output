##### Output after terraform apply#####

data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 0s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.eg_prod_bastion_label_nat_eip will be created
  + resource "aws_eip" "eg_prod_bastion_label_nat_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Attributes" = "main"
          + "Name"       = "ll-vpc-main"
          + "Namespace"  = "ll"
        }
      + tags_all             = {
          + "Attributes" = "main"
          + "Name"       = "ll-vpc-main"
          + "Namespace"  = "ll"
        }
      + vpc                  = true
    }

  # aws_internet_gateway.eg_prod_bastion_label_ig will be created
  + resource "aws_internet_gateway" "eg_prod_bastion_label_ig" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "module.label_vpc.tags"
        }
      + tags_all = {
          + "Name" = "module.label_vpc.tags"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.eg_prod_bastion_label_ig_nat will be created
  + resource "aws_nat_gateway" "eg_prod_bastion_label_ig_nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "module.label_vpc.tags"
        }
      + tags_all                           = {
          + "Name" = "module.label_vpc.tags"
        }
    }

  # aws_route.eg_prod_bastion_label_public_internet_gateway will be created
  + resource "aws_route" "eg_prod_bastion_label_public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)
    }

  # aws_route.private_nat_gateway will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)
    }

  # aws_route_table.eg_prod_bastion_label_private will be created
  + resource "aws_route_table" "eg_prod_bastion_label_private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "module.label_vpc.tags"
        }
      + tags_all         = {
          + "Name" = "module.label_vpc.tags"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.eg_prod_bastion_label_public will be created
  + resource "aws_route_table" "eg_prod_bastion_label_public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "module.label_vpc.tags"
        }
      + tags_all         = {
          + "Name" = "module.label_vpc.tags"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.private will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.eg_prod_bastion_label_security_group will be created
  + resource "aws_security_group" "eg_prod_bastion_label_security_group" {
      + arn                    = (known after apply)
      + description            = "Default security group to allow inbound/outbound from the VPC"
      + egress                 = [
          + {
              + cidr_blocks      = []
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = true
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = true
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "default-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.private_subnet will be created
  + resource "aws_subnet" "private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.170.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "module.label_vpc.tags"
        }
      + tags_all                                       = {
          + "Name" = "module.label_vpc.tags"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnet will be created
  + resource "aws_subnet" "public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.170.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "module.label_vpc.tags"
        }
      + tags_all                                       = {
          + "Name" = "module.label_vpc.tags"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "192.170.0.0/20"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Attributes" = "main"
          + "Name"       = "ll-vpc-main"
          + "Namespace"  = "ll"
        }
      + tags_all                             = {
          + "Attributes" = "main"
          + "Name"       = "ll-vpc-main"
          + "Namespace"  = "ll"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.
╷
│ Warning: Argument is deprecated
│ 
│   with aws_eip.eg_prod_bastion_label_nat_eip,
│   on vpc.tf line 44, in resource "aws_eip" "eg_prod_bastion_label_nat_eip":
│   44:   vpc        = true
│ 
│ use domain attribute instead
│ 
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.main: Creating...
aws_vpc.main: Still creating... [10s elapsed]
aws_vpc.main: Creation complete after 12s [id=vpc-07baf3953205f9a41]
aws_route_table.eg_prod_bastion_label_private: Creating...
aws_internet_gateway.eg_prod_bastion_label_ig: Creating...
aws_route_table.eg_prod_bastion_label_public: Creating...
aws_security_group.eg_prod_bastion_label_security_group: Creating...
aws_subnet.private_subnet: Creating...
aws_subnet.public_subnet: Creating...
aws_internet_gateway.eg_prod_bastion_label_ig: Creation complete after 0s [id=igw-0b49bc7aa41aa22f9]
aws_eip.eg_prod_bastion_label_nat_eip: Creating...
aws_route_table.eg_prod_bastion_label_public: Creation complete after 0s [id=rtb-0d2e13bbdfaddacb6]
aws_route.eg_prod_bastion_label_public_internet_gateway: Creating...
aws_route_table.eg_prod_bastion_label_private: Creation complete after 0s [id=rtb-0e5e6eb673667f247]
aws_subnet.private_subnet: Creation complete after 0s [id=subnet-044cccbb2ee18cdd7]
aws_route_table_association.private: Creating...
aws_route_table_association.private: Creation complete after 0s [id=rtbassoc-0a303d9b9e671b809]
aws_eip.eg_prod_bastion_label_nat_eip: Creation complete after 0s [id=eipalloc-058fd42ed9d5b3b39]
aws_route.eg_prod_bastion_label_public_internet_gateway: Creation complete after 1s [id=r-rtb-0d2e13bbdfaddacb61080289494]
aws_security_group.eg_prod_bastion_label_security_group: Creation complete after 2s [id=sg-03580bebc98c1d631]
aws_subnet.public_subnet: Still creating... [10s elapsed]
aws_subnet.public_subnet: Creation complete after 10s [id=subnet-0dafdf5ee8da7c2bd]
aws_route_table_association.public: Creating...
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Creating...
aws_route_table_association.public: Creation complete after 1s [id=rtbassoc-03165b6184883e832]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [10s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [20s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [30s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [40s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [50s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [1m0s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [1m11s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [1m21s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [1m31s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Still creating... [1m41s elapsed]
aws_nat_gateway.eg_prod_bastion_label_ig_nat: Creation complete after 1m44s [id=nat-05a414d65cbfc8bcd]
aws_route.private_nat_gateway: Creating...
aws_route.private_nat_gateway: Creation complete after 1s [id=r-rtb-0e5e6eb673667f2471080289494]
╷
│ Warning: Argument is deprecated
│ 
│   with aws_eip.eg_prod_bastion_label_nat_eip,
│   on vpc.tf line 44, in resource "aws_eip" "eg_prod_bastion_label_nat_eip":
│   44:   vpc        = true
│ 
│ use domain attribute instead
╵

Apply complete! Resources: 13 added, 0 changed, 0 destroyed.
